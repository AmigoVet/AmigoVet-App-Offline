# Podfile

# Función para resolver scripts con Node
def node_require(script)
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

# Requerir scripts de React Native y react-native-permissions
node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

# Especifica la plataforma mínima (puedes ajustar según tus necesidades, pero min_ios_version_supported es dinámico)
platform :ios, min_ios_version_supported
prepare_react_native_project!

# Configuración de frameworks (manteniendo tu lógica para USE_FRAMEWORKS)
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'AmigoVet' do
  config = use_native_modules!

  # Configuración de React Native
  use_react_native!(
    :path => config[:reactNativePath],
    # Ruta absoluta al directorio raíz de la aplicación
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Agregar react-native-sqlite-storage explícitamente
  pod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'

  # Configurar permisos necesarios
  setup_permissions([
    'Camera',                # Para tomar fotos
    'PhotoLibrary',         # Para acceder a la galería
    'PhotoLibraryAddOnly',  # Para guardar fotos en la galería
  ])

  # Configuración post-install para React Native
  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    # Opcional: Asegura que todas las dependencias usen la versión correcta de SQLite
    installer.pods_project.targets.each do |target|
      if target.name == 'react-native-sqlite-storage'
        target.build_configurations.each do |config|
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        end
      end
    end
  end
end